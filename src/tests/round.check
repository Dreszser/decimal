#suite s21_round_test

#test s21_round_test1
int true_res = 0;
s21_decimal value = {{0x9ab8b17f, 0xec91eb14, 0x3e2129ce, 0x80140000}};
s21_decimal result = {{0xb75fc1a, 0x0, 0x0, 0x80000000}};
s21_decimal output = {0};
int s21_res = s21_round(value, &output);
for (int i = 0; i < 4; i++) ck_assert_int_eq(result.bits[i], output.bits[i]);
ck_assert_int_eq(s21_res, true_res);

#test s21_round_test2
int true_res = 0;
s21_decimal value = {{0xdf47841, 0xaee1, 0x0, 0x80060000}};
s21_decimal result = {{0xb75fc19, 0x0, 0x0, 0x80000000}};
s21_decimal output = {0};
int s21_res = s21_round(value, &output);
for (int i = 0; i < 4; i++) ck_assert_int_eq(result.bits[i], output.bits[i]);
ck_assert_int_eq(s21_res, true_res);

#test s21_round_test3
int true_res = 0;
s21_decimal value = {{0xb75fc19, 0x0, 0x0, 0x80000000}};
s21_decimal result = {{0xb75fc19, 0x0, 0x0, 0x80000000}};
s21_decimal output = {0};
int s21_res = s21_round(value, &output);
for (int i = 0; i < 4; i++) ck_assert_int_eq(result.bits[i], output.bits[i]);
ck_assert_int_eq(s21_res, true_res);

#test s21_round_test4
int true_res = 1;
s21_decimal value = {{0xffffffff, 0xffffffff, 0xffffffff, 0x10000}};
s21_decimal *output = NULL;
int s21_res = s21_round(value, output);
ck_assert_int_eq(s21_res, true_res);
